import { useCallback, useEffect, useRef, useState } from 'react';
import { io, Socket } from 'socket.io-client';
import { GamePong42WebRTC } from './webrtc';

interface GamePong42State {
  connected: boolean;
  roomState: any;
  error: string | null;
}

interface PlayerInfo {
  name: string;
  avatar?: string;
}

const SFU_URL = 'http://localhost:3001';

export const useGamePong42SFU = () => {
  const [connected, setConnected] = useState(false);
  const [roomState, setRoomState] = useState<any>(null);
  const [error, setError] = useState<string>('');
  const [npcStates, setNpcStates] = useState<any[]>([]);
  const [webrtcReady, setWebrtcReady] = useState(false);
  const socketRef = useRef<Socket | null>(null);
  const webrtcRef = useRef<GamePong42WebRTC | null>(null);

  const connect = useCallback(() => {
    if (socketRef.current?.connected) {
      console.log('üîó Already connected to SFU server');
      return;
    }

    console.log('üîó Starting SFU connection process...');
    console.log('Connecting to SFU server:', SFU_URL);

    try {
      socketRef.current = io(SFU_URL, {
        transports: ['polling', 'websocket'],
        upgrade: true,
        timeout: 20000,
        forceNew: true,
        autoConnect: true
      });

      const socket = socketRef.current;

      // Êé•Á∂öÊàêÂäü
      socket.on('connect', () => {
        console.log('‚úÖ Connected to SFU server:', socket.id);
        console.log('üîç Socket connected state after connect:', socket.connected);
        // Êé•Á∂öÁä∂ÊÖã„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åã„ÇâÁä∂ÊÖã„ÇíÊõ¥Êñ∞
        setTimeout(() => {
          if (socket.connected) {
            setConnected(true);
            setError('');
            console.log('üîç Socket state verified and connected state updated');
          }
        }, 200);
      });

      // Êé•Á∂öÁ¢∫Ë™ç„É°„ÉÉ„Çª„Éº„Ç∏
      socket.on('connection-confirmed', (data) => {
        console.log('‚úÖ SFU connection confirmed:', data);
        setConnected(true);
      });

      // Êé•Á∂ö„Ç®„É©„Éº
      socket.on('connect_error', (err) => {
        console.error('‚ùå SFU connection error:', err);
        setError(`Connection failed: ${err.message}`);
        setConnected(false);
      });

      // ÂàáÊñ≠
      socket.on('disconnect', (reason) => {
        console.log('üîå Disconnected from SFU server:', reason);
        setConnected(false);
        setRoomState(null);
        setWebrtcReady(false);

        // WebRTC„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
        if (webrtcRef.current) {
          webrtcRef.current.disconnect();
          webrtcRef.current = null;
        }
      });

      // „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
      socket.on('error', (err) => {
        console.error('‚ùå SFU socket error:', err);
        setError(`Socket error: ${err.message || err}`);
      });

      // GamePong42Èñ¢ÈÄ£„ÅÆ„Ç§„Éô„É≥„Éà
      socket.on('gamepong42-joined', async (data) => {
        console.log('üéÆ Joined GamePong42 room:', data);
        setRoomState(data);

        // WebRTC„ÇíÂàùÊúüÂåñ
        try {
          console.log('üîß Initializing WebRTC for GamePong42...');
          webrtcRef.current = new GamePong42WebRTC(socket);
          const success = await webrtcRef.current.initialize();

          if (success) {
            console.log('‚úÖ WebRTC initialized successfully');
            setWebrtcReady(true);

            // „Ç≤„Éº„É†Áä∂ÊÖãÂèó‰ø°„ÅÆ„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ„ÇíË®≠ÂÆö
            webrtcRef.current.onGameStateReceived((gameState) => {
              console.log('üìä Game state received via WebRTC:', gameState);
              setNpcStates(prev => {
                const newStates = [...prev];
                newStates.push(gameState);
                return newStates;
              });
            });

            // „Éá„Éº„Çø„ÉÅ„É£„É≥„Éç„É´„ÅÆ‰ΩúÊàê
            await webrtcRef.current.createGameDataChannel();
          } else {
            console.error('‚ùå Failed to initialize WebRTC');
            setError('Failed to initialize WebRTC');
          }
        } catch (error: any) {
          console.error('‚ùå WebRTC initialization error:', error);
          setError(`WebRTC error: ${error.message}`);
        }
      });

      socket.on('gamepong42-participant-joined', (data) => {
        console.log('üë• New participant joined:', data);
        setRoomState((prev: any) => ({
          ...prev,
          participantCount: data.participantCount
        }));
      });

      socket.on('gamepong42-game-started', (data) => {
        console.log('üöÄ GamePong42 started:', data);
        setRoomState((prev: any) => ({
          ...prev,
          gameStarted: true,
          ...data
        }));
      });

      socket.on('gamepong42-state', (data) => {
        console.log('üìä Game state update received:', data);
        // NPC„ÅÆÁä∂ÊÖãÊõ¥Êñ∞„ÇíÂá¶ÁêÜ
        if (data.gameState) {
          setNpcStates(prev => {
            const newStates = [...prev];
            // „Éá„Éº„Çø„ÇíÈÅ©Âàá„Å´Âá¶ÁêÜ„Åó„Å¶npcStates„Å´ËøΩÂä†
            newStates.push(data);
            return newStates;
          });
        }
      });

      // „Éá„Éê„ÉÉ„Ç∞: ÂÖ®„Å¶„ÅÆ„Ç§„Éô„É≥„Éà„Çí„É≠„Ç∞
      socket.onAny((eventName, ...args) => {
        console.log(`üì® SFU Event received: ${eventName}`, args);
      });

      console.log('üîó SFU connect function called successfully');
    } catch (err: any) {
      console.error('‚ùå Failed to create SFU connection:', err);
      setError(`Failed to create connection: ${err.message}`);
    }
  }, []);

  const disconnect = useCallback(() => {
    if (socketRef.current) {
      console.log('üîå Disconnecting from SFU server...');
      socketRef.current.disconnect();
      socketRef.current = null;
      setConnected(false);
      setRoomState(null);
      setError('');
    }
  }, []);

  const joinGamePong42Room = useCallback((roomNumber: string, playerInfo: PlayerInfo) => {
    // Socket.IO„ÅÆÂÆüÈöõ„ÅÆÊé•Á∂öÁä∂ÊÖã„ÇíÁ¢∫Ë™ç
    if (!socketRef.current || !socketRef.current.connected) {
      console.error('‚ùå Cannot join room: Socket.IO not connected');
      console.log('üîç Debug - socketRef.current exists:', !!socketRef.current);
      console.log('üîç Debug - socketRef.current?.connected:', socketRef.current?.connected);
      console.log('üîç Debug - connected state:', connected);

      // Â∞ë„ÅóÂæÖ„Å£„Å¶„Åã„ÇâÂÜçË©¶Ë°å
      setTimeout(() => {
        if (socketRef.current?.connected) {
          console.log('üîÑ Retrying room join after connection stabilized');
          socketRef.current.emit('join-gamepong42', {
            roomNumber,
            playerInfo
          });
        } else {
          setError('Socket.IO connection is not stable');
        }
      }, 500);
      return;
    }

    console.log('üéÆ Joining GamePong42 room:', { roomNumber, playerInfo });
    socketRef.current.emit('join-gamepong42', {
      roomNumber,
      playerInfo
    });
  }, [connected]);

  const sendGameState = useCallback((roomId: string, gameState: any) => {
    if (!socketRef.current?.connected) {
      console.warn('‚ö†Ô∏è Cannot send game state: not connected to SFU server');
      return;
    }

    // WebRTC„Çí‰ΩøÁî®„Åó„Å¶„Ç≤„Éº„É†Áä∂ÊÖã„ÇíÈÄÅ‰ø°
    if (webrtcRef.current && webrtcReady) {
      console.log('üì§ Sending game state via WebRTC data channel');
      webrtcRef.current.sendGameState({ roomId, gameState });
    } else {
      // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: Socket.IO„Çí‰ΩøÁî®
      console.log('üì§ Sending game state via Socket.IO (fallback)');
      socketRef.current.emit('gamepong42-send-state', {
        roomNumber: roomId,
        gameState
      });
    }
  }, [webrtcReady]);

  // „Éö„Éº„Ç∏Ë™≠„ÅøËæº„ÅøÊôÇ„Å´Ëá™ÂãïÊé•Á∂ö
  useEffect(() => {
    connect();
    return () => {
      disconnect();
    };
  }, [connect, disconnect]);

  // Êé•Á∂öÁä∂ÊÖã„ÅÆÂ§âÂåñ„Çí„É≠„Ç∞
  useEffect(() => {
    console.log('üîó SFU connected state changed:', connected);
    if (connected && socketRef.current) {
      // Êé•Á∂ö„ÅåÁ¢∫Á´ã„Åï„Çå„Åü„ÇâËá™ÂãïÁöÑ„Å´GamePong42„É´„Éº„É†„Å´ÂèÇÂä†
      const defaultRoomNumber = 'default';
      const playerInfo: PlayerInfo = {
        name: `Player_${Math.random().toString(36).substr(2, 9)}`
      };

      console.log('üéÆ Auto-joining GamePong42 room...');
      joinGamePong42Room(defaultRoomNumber, playerInfo);
    }
  }, [connected, joinGamePong42Room]);

  // „É´„Éº„É†Áä∂ÊÖã„ÅÆÂ§âÂåñ„Çí„É≠„Ç∞
  useEffect(() => {
    console.log('üè† SFU room state effect triggered, roomState:', roomState);
    if (!roomState) {
      console.log('‚ùì No room state available');
    }
  }, [roomState]);

  return {
    connected,
    roomState,
    error,
    npcStates,
    socket: socketRef.current,
    webrtc: webrtcRef.current,
    webrtcReady,
    connect,
    disconnect,
    joinGamePong42Room,
    sendGameState
  };
};

export default useGamePong42SFU;
