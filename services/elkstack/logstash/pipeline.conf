# Sample Logstash configuration for creating a simple
# Beats -> Logstash -> Elasticsearch pipeline.
# 入力の設定
# ここではファイルを使用しますが、標準入力から受け付けたりもできます。
input {
    file {
        # 末尾を読み込むモード
        mode => "tail"
        # 対象ファイル
        path => ["/host/logs/*.log"]
        # ファイルのどこまで読み込んだか記録しておくファイル
        # ここではLOGSTASH_HOMEに配置しています
        # なくても動くかも？
        # 拡張子は「.sincedb」
        # sincedb_path => "../csv-sample.sincedb"
        # 読み込み開始位置など
        start_position => "beginning"
        codec => plain {
            charset => "UTF-8"
        }
        type => "application_log"
    }

    # CSVファイルも処理する場合
    file {
        path => ["/host/logs/*.csv"]
        start_position => "beginning"
        codec => plain {
            charset => "UTF-8"
        }
        type => "csv_log"
    }
}

# ファイルのフォーマットに合わせた解析設定
filter {
    # アプリケーションログの処理（JSON形式）
    if [type] == "application_log" {
        if [message] =~ /^\{.*\}$/ {
            json {
                source => "message"
            }

            # サービス名をタグとして追加
            if [service] {
                mutate {
                    add_tag => ["service_%{service}"]
                }
            }

            # ファイル名からサービス名を抽出
            if [path] {
                grok {
                    match => { "path" => "/host/logs/(?<service_name>[^-/]+)" }
                }
            }
        }
    }

    # CSVファイルの処理
    if [type] == "csv_log" {
        csv {
            columns => ["Date", "Level", "ErrorMessage", "UserId"]
            convert => {
                "UserId" => "integer"
            }
            skip_header => true
        }

        date {
            match => ["Date", "yyyy-MM-dd HH:mm:ss"]
        }

        mutate {
            add_field => { "level_keyword" => "%{Level}" }
            add_field => { "error_message_text" => "%{ErrorMessage}" }
            remove_field => ["Date"]
        }
    }

    # 共通フィールドのクリーンアップ
    mutate {
        remove_field => ["host", "@version"]
    }
}

# 出力先の設定
output {
    # サービス別にインデックスを分ける
    if [service] {
        elasticsearch {
            hosts => ["https://elasticsearch:9200"]
            user => "elastic"
            password => "${ELASTIC_PASSWORD}"
            ssl_verification_mode => "none"
            index => "transcendence-%{service}-%{+YYYY.MM.dd}"
        }
    } else if [type] == "csv_log" {
        elasticsearch {
            hosts => ["https://elasticsearch:9200"]
            user => "elastic"
            password => "${ELASTIC_PASSWORD}"
            ssl_verification_mode => "none"
            index => "transcendence-csv-%{+YYYY.MM.dd}"
        }
    } else {
        elasticsearch {
            hosts => ["https://elasticsearch:9200"]
            user => "elastic"
            password => "${ELASTIC_PASSWORD}"
            ssl_verification_mode => "none"
            index => "transcendence-general-%{+YYYY.MM.dd}"
        }
    }

    # デバッグ用
    stdout {
        codec => rubydebug
    }
}
