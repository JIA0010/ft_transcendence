# Sample Logstash configuration for creating a simple
# Beats -> Logstash -> Elasticsearch pipeline.
# 入力の設定
# ここではファイルを使用しますが、標準入力から受け付けたりもできます。
input {
  file {
    path => "/host/logs/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => plain
    type => "json_log"
  }

  file {
    path => "/host/logs/*.csv"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => plain
    type => "csv_log"
  }
}

# ファイルのフォーマットに合わせた解析設定
filter {
  # アプリケーションログの処理（JSON形式）
  if [type] == "json_log" {
    if [message] =~ /^\{/ {
      json {
        source => "message"
      }

      mutate {
        add_field => { "log_type" => "application" }
        add_field => { "service_name" => "%{service}" }
        add_field => { "log_level_keyword" => "%{level}" }
        add_field => { "message_text" => "%{message}" }
      }

      if [metadata] {
        if [metadata][category] {
          mutate { add_field => { "category_keyword" => "%{[metadata][category]}" } }
        }
        if [metadata][userId] {
          mutate { add_field => { "user_id" => "%{[metadata][userId]}" } }
        }
        if [metadata][errorCode] {
          mutate { add_field => { "error_code_keyword" => "%{[metadata][errorCode]}" } }
        }
      }
    }
  }

  # CSVファイルの処理
  if [type] == "csv_log" {
    if [message] !~ /^timestamp,/ {
      csv {
        columns => ["log_timestamp", "level", "message", "user_id", "error_code"]
        skip_header => false
      }

      date {
        match => [ "log_timestamp", "yyyy-MM-dd HH:mm:ss", "ISO8601" ]
        target => "@timestamp"
      }

      mutate {
        add_field => { "log_type" => "csv_error" }
        add_field => { "log_level_keyword" => "%{level}" }
        add_field => { "message_keyword" => "%{message}" }
        add_field => { "error_message_text" => "%{message}" }
        add_field => { "category_keyword" => "csv_error" }
      }

      if [error_code] and [error_code] != "" {
        mutate { add_field => { "error_code_keyword" => "%{error_code}" } }
      }

      if [level] == "ERROR" {
        mutate { add_field => { "severity_score" => "3" } }
      } else if [level] == "WARN" {
        mutate { add_field => { "severity_score" => "2" } }
      } else {
        mutate { add_field => { "severity_score" => "1" } }
      }

      mutate {
        convert => { "severity_score" => "integer" }
        convert => { "user_id" => "integer" }
      }
    } else {
      drop { }
    }
  }

  # 共通フィールドのクリーンアップ
  mutate {
    remove_field => ["host", "@version", "log_timestamp"]
  }
}

# 出力先の設定
output {
  if [log_type] == "application" {
    elasticsearch {
      hosts => ["https://elasticsearch:9200"]
      user => "elastic"
      password => "${ELASTIC_PASSWORD}"
      ssl_verification_mode => "none"
      index => "transcendence-app-%{+YYYY.MM.dd}"
    }
  } else if [log_type] == "csv_error" {
    elasticsearch {
      hosts => ["https://elasticsearch:9200"]
      user => "elastic"
      password => "${ELASTIC_PASSWORD}"
      ssl_verification_mode => "none"
      index => "transcendence-csv-%{+YYYY.MM.dd}"
    }
  }

  # デバッグ用
  stdout { codec => rubydebug }
}
